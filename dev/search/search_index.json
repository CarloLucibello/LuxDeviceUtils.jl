{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LuxDeviceUtils.jl: Device Management and Data Transfer Utilities for Deep Learning","text":""},{"location":"#luxdeviceutils","title":"LuxDeviceUtils","text":"<p><code>LuxDeviceUtils.jl</code> is a lightweight package defining rules for transferring data across devices. Most users should directly use Lux.jl instead.</p> <p></p> <p></p>"},{"location":"#api-reference","title":"API Reference","text":""},{"location":"#index","title":"Index","text":"<ul> <li><code>LuxDeviceUtils.cpu_device</code></li> <li><code>LuxDeviceUtils.gpu_backend!</code></li> <li><code>LuxDeviceUtils.gpu_device</code></li> <li><code>LuxDeviceUtils.reset_gpu_device!</code></li> <li><code>LuxDeviceUtils.supported_gpu_backends</code></li> </ul>"},{"location":"#preferences","title":"Preferences","text":"<p># <code>LuxDeviceUtils.gpu_backend!</code> \u2014 Function.</p> <pre><code>gpu_backend!() = gpu_backend!(\"\")\ngpu_backend!(backend) = gpu_backend!(string(backend))\ngpu_backend!(backend::AbstractLuxGPUDevice)\ngpu_backend!(backend::String)\n</code></pre> <p>Creates a <code>LocalPreferences.toml</code> file with the desired GPU backend.</p> <p>If <code>backend == \"\"</code>, then the <code>gpu_backend</code> preference is deleted. Otherwise, <code>backend</code> is validated to be one of the possible backends and the preference is set to <code>backend</code>.</p> <p>If a new backend is successfully set, then the Julia session must be restarted for the change to take effect.</p> <p>source</p> <p></p> <p></p>"},{"location":"#data-transfer","title":"Data Transfer","text":"<p># <code>LuxDeviceUtils.cpu_device</code> \u2014 Function.</p> <pre><code>cpu_device() -&gt; LuxCPUDevice()\n</code></pre> <p>Return a <code>LuxCPUDevice</code> object which can be used to transfer data to CPU.</p> <p>source</p> <p># <code>LuxDeviceUtils.gpu_device</code> \u2014 Function.</p> <pre><code>gpu_device(; force_gpu_usage::Bool=false) -&gt; AbstractLuxDevice()\n</code></pre> <p>Selects GPU device based on the following criteria:</p> <ol> <li>If <code>gpu_backend</code> preference is set and the backend is functional on the system, then that device is selected.</li> <li>Otherwise, an automatic selection algorithm is used. We go over possible device backends in the order specified by <code>supported_gpu_backends()</code> and select the first functional backend.</li> <li>If no GPU device is functional and  <code>force_gpu_usage</code> is <code>false</code>, then <code>cpu_device()</code> is invoked.</li> <li>If nothing works, an error is thrown.</li> </ol> <p>source</p> <p></p> <p></p>"},{"location":"#miscellaneous","title":"Miscellaneous","text":"<p># <code>LuxDeviceUtils.reset_gpu_device!</code> \u2014 Function.</p> <pre><code>reset_gpu_device!()\n</code></pre> <p>Resets the selected GPU device. This is useful when automatic GPU selection needs to be run again.</p> <p>source</p> <p># <code>LuxDeviceUtils.supported_gpu_backends</code> \u2014 Function.</p> <pre><code>supported_gpu_backends() -&gt; Tuple{String, ...}\n</code></pre> <p>Return a tuple of supported GPU backends.</p> <p>Warning</p> <p>This is not the list of functional backends on the system, but rather backends which <code>Lux.jl</code> supports.</p> <p>source</p>"}]}