steps:
  - group: ":julia: CUDA GPU"
    steps:
      - label: ":julia: Julia {{matrix.julia}} + CUDA GPU"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-test#v1:
              test_args: "--quickfail"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - ext
        agents:
          queue: "juliagpu"
          cuda: "*"
        env:
          GROUP: "CUDA"
        if: build.message !~ /\[skip tests\]/
        timeout_in_minutes: 60
        matrix:
          setup:
            julia:
              - "1"

  - group: ":telescope: Downstream CUDA"
    steps:
      - label: ":julia: {{matrix.repo}} (Julia {{matrix.julia}} + CUDA GPU)"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - ext
        command: |
          julia --code-coverage=user --color=yes --project -e '
            using Pkg

            repo = ENV["DOWNSTREAM_TEST_REPO"]

            println("--- :julia: Instantiating project")
            withenv("JULIA_PKG_PRECOMPILE_AUTO" => 0) do
              Pkg.instantiate()

              try
                Pkg.develop(repo)
                println("+++ :julia: Running tests")
                Pkg.test("$(repo)"; coverage=true)
              catch err
                err isa Pkg.Resolve.ResolverError || rethrow()
                @info "Not compatible with this release. No problem." exception=err
                exit(0)
              end
            end

            println("+++ :julia: Finished Downstream Test")'
        agents:
          queue: "juliagpu"
          cuda: "*"
        env:
          GROUP: "CUDA"
          DOWNSTREAM_TEST_REPO: "{{matrix.repo}}"
        if: build.message !~ /\[skip tests\]/ || build.message !~ /\[skip downstream\]/
        timeout_in_minutes: 240
        matrix:
          setup:
            julia:
              - "1"
            repo:
              - "Lux"
              - "Boltz"

  - group: ":julia: AMD GPU"
    steps:
      - label: ":julia: Julia: {{matrix.julia}} + AMD GPU"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-test#v1:
              test_args: "--quickfail"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - ext
        env:
          JULIA_AMDGPU_CORE_MUST_LOAD: "1"
          JULIA_AMDGPU_HIP_MUST_LOAD: "1"
          JULIA_AMDGPU_DISABLE_ARTIFACTS: "1"
          GROUP: "AMDGPU"
        agents:
          queue: "juliagpu"
          rocm: "*"
          rocmgpu: "*"
        if: build.message !~ /\[skip tests\]/
        timeout_in_minutes: 60
        matrix:
          setup:
            julia:
              - "1"

  - group: ":telescope: Downstream AMD GPU"
    steps:
      - label: ":julia: {{matrix.repo}} (Julia {{matrix.julia}} + AMD GPU)"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - ext
        command: |
          julia --code-coverage=user --color=yes --project -e '
            using Pkg

            repo = ENV["DOWNSTREAM_TEST_REPO"]

            println("--- :julia: Instantiating project")
            withenv("JULIA_PKG_PRECOMPILE_AUTO" => 0) do
              Pkg.instantiate()

              try
                Pkg.develop(repo)
                println("+++ :julia: Running tests")
                Pkg.test("$(repo)"; coverage=true)
              catch err
                err isa Pkg.Resolve.ResolverError || rethrow()
                @info "Not compatible with this release. No problem." exception=err
                exit(0)
              end
            end

            println("+++ :julia: Finished Downstream Test")'
        agents:
          queue: "juliagpu"
          rocm: "*"
          rocmgpu: "*"
        env:
          GROUP: "AMDGPU"
          JULIA_AMDGPU_CORE_MUST_LOAD: "1"
          JULIA_AMDGPU_HIP_MUST_LOAD: "1"
          JULIA_AMDGPU_DISABLE_ARTIFACTS: "1"
          DOWNSTREAM_TEST_REPO: "{{matrix.repo}}"
        if: build.message !~ /\[skip tests\]/ || build.message !~ /\[skip downstream\]/
        timeout_in_minutes: 240
        matrix:
          setup:
            julia:
              - "1"
            repo:
              - "Lux"
              - "Boltz"

  - group: ":julia: Metal GPU"
    steps:
      - label: ":julia: Julia: {{matrix.julia}} + Metal"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-test#v1:
              test_args: "--quickfail"
          # - JuliaCI/julia-coverage#v1:
          #     codecov: true
          #     dirs:
          #       - src
          #       - ext
        agents:
          queue: "juliaecosystem"
          os: "macos"
          arch: "aarch64"
        env:
          GROUP: "Metal"
        if: build.message !~ /\[skip tests\]/
        timeout_in_minutes: 60
        matrix:
          setup:
            julia:
              - "1"

env:
  SECRET_CODECOV_TOKEN: "PxSr3Y7vdbiwaoX51uGykPsogxmP1IOBt5Z8TwP9GqDxIrvFocEVV2DR4Bebee12G/HYvXtQTyYXH49DpzlsfJ7ri1GQZxd9WRr+aM1DDYmzfDCfpadp4hMoJ5NQvmc/PzeGrNWOOaewaLTUP1eEaG4suygZN0lc5q9BCchIJeqoklGms5DVt/HtfTmwoD/s4wGoIJINi4RoFgnCAkzSh11hTAkyjVerfBGWEi/8E6+WBq3UKwaW4HnT02wG9qFnD4XkHpIpjMxJTpdBn5ufKI+QoJ7qJHlwqgDCtsOCblApccLTjH/BnTahNoSb/b0wdS/cblOTrtdPGzZ5UvmQ4Q==;U2FsdGVkX1/Ji2Nqeq3tqTYCBik6iXILP+rriPRqj/qxhFu4vBWWT3UnlfqDzj6oVdXyuKt0+5e+x33x2S0mBw=="
